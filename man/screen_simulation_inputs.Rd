% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/screen_simulation_inputs.R
\name{screen_simulation_inputs}
\alias{screen_simulation_inputs}
\title{Screen many simulation inputs: a parent function to \code{do_nmb_sim()}}
\usage{
screen_simulation_inputs(
  sample_size,
  n_sims,
  n_valid,
  sim_auc,
  event_rate,
  cutpoint_methods = get_inbuilt_cutpoint(return_all_methods = TRUE),
  fx_nmb_training,
  fx_nmb_evaluation,
  meet_min_events = FALSE,
  cl = NULL
)
}
\arguments{
\item{sample_size}{a value (or vector of values): training data sample size. If missing, a sample size calculation will be performed and the calculated size will be used.}

\item{n_sims}{a value (or vector of values): the number of simulations to run.}

\item{n_valid}{a value (or vector of values): sample size for evaluation set.}

\item{sim_auc}{a value (or vector of values): simulated model discrimination (AUC).}

\item{event_rate}{a value (or vector of values): simulated event rate of the binary outcome being predicted.}

\item{cutpoint_methods}{cutpoint methods to include. Defaults to use the inbuilt methods. This doesn't change across calls to \code{do_nmb_sim()}}

\item{fx_nmb_training}{a function (or list of functions) that returns named vector of NMB assigned to classifications use for obtaining cutpoint on training set}

\item{fx_nmb_evaluation}{a function (or list of functions) that returns named vector of NMB assigned to classifications use for obtaining cutpoint on evaluation set}

\item{meet_min_events}{Whether or not to incrementally add samples until the expected number of events (\code{sample_size * event_rate}) is met. (Applies to sampling of training data only.)}

\item{cl}{A cluster made using \code{parallel::makeCluster()}. If a cluster is provided, the simulation will be done in parallel.}
}
\value{
predictNMBscreen
}
\description{
Screen many simulation inputs: a parent function to \code{do_nmb_sim()}
}
\examples{

# perform screen with increasing values of model discimination (sim_auc)
if (FALSE) {
  get_nmb <- function() c("TP" = -3, "TN" = 0, "FP" = -1, "FN" = -4)
  sim_screen_obj <- screen_simulation_inputs(
    n_sims = 50, n_valid = 10000, sim_auc = seq(0.7, 0.9, 0.1), event_rate = 0.1,
    fx_nmb_training = get_nmb, fx_nmb_evaluation = get_nmb
  )
}
}
